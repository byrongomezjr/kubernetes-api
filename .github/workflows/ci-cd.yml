name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_deployment:
        description: 'Run deployment step'
        required: true
        type: boolean
        default: false

env:
  REGISTRY: docker.io
  IMAGE_NAME: byrongomezjr/kubernetes-api

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    
    - name: Install dependencies
      run: go mod download
    
    - name: Build
      run: go build -v ./...
    
    - name: Test
      run: go test -v ./...
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        skip-cache: true
    
  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=short
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
    
  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || contains(github.ref, 'deploy')) || 
      (github.event_name == 'workflow_dispatch' && inputs.run_deployment == true)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for Kubernetes configuration
      id: check_kube_config
      run: |
        if [[ -z "${{ secrets.KUBE_CONFIG }}" ]]; then
          echo "KUBE_CONFIG secret is not set or empty. Skipping deployment."
          echo "has_kube_config=false" >> $GITHUB_OUTPUT
        else
          echo "KUBE_CONFIG secret is set. Proceeding with deployment."
          echo "has_kube_config=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up Helm
      if: steps.check_kube_config.outputs.has_kube_config == 'true'
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
    
    - name: Set up kubectl
      if: steps.check_kube_config.outputs.has_kube_config == 'true'
      uses: azure/setup-kubectl@v3
    
    - name: Configure kubectl
      if: steps.check_kube_config.outputs.has_kube_config == 'true'
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        # Validate the kubeconfig file
        if ! kubectl cluster-info > /dev/null 2>&1; then
          echo "::warning::Could not connect to Kubernetes cluster. Deployment will be skipped."
          echo "has_valid_connection=false" >> $GITHUB_OUTPUT
          exit 0
        else
          echo "has_valid_connection=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Deploy to Kubernetes
      if: steps.check_kube_config.outputs.has_kube_config == 'true'
      run: |
        # Determine image tag to use
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          TAG="${{ github.ref_name }}"
        else
          TAG="latest"
        fi
        
        # Deploy with Helm
        helm upgrade --install kubernetes-api ./helm/kubernetes-api \
          --namespace kubernetes-api --create-namespace \
          --set image.tag=${TAG} \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set secrets.JWT_SECRET="${{ secrets.JWT_SECRET }}"
        
        # Verify deployment
        kubectl rollout status deployment/kubernetes-api -n kubernetes-api